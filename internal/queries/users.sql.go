// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: users.sql

package queries

import (
	"context"
)

const countUsers = `-- name: CountUsers :one
SELECT COUNT(*) FROM users WHERE $1::VARCHAR[] IS NULL OR labels @> $1
`

func (q *Queries) CountUsers(ctx context.Context, matchLabels []string) (int64, error) {
	row := q.db.QueryRow(ctx, countUsers, matchLabels)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (name, labels) VALUES ($1, $2) RETURNING id, name, created_at, updated_at, labels
`

type CreateUserParams struct {
	Name   string
	Labels []string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Labels)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Labels,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :one
DELETE FROM users WHERE id = $1 RETURNING id, name, created_at, updated_at, labels
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, deleteUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Labels,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT id, name, created_at, updated_at, labels FROM users WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id int32) (User, error) {
	row := q.db.QueryRow(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Labels,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, name, created_at, updated_at, labels FROM users 
	WHERE $1::VARCHAR[] IS NULL OR labels @> $1
	LIMIT $3 
	OFFSET $2
`

type ListUsersParams struct {
	MatchLabels []string
	Offset      int32
	Limit       int32
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.Query(ctx, listUsers, arg.MatchLabels, arg.Offset, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Labels,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
